//两个单链表相交的一系列问题 
//【题目】 在本题中，单链表可能有环，也可能无环。给定两个 
//单链表的头节点 head1和head2，这两个链表可能相交，也可能 
//不相交。请实现一个函数， 如果两个链表相交，请返回相交的 
//第一个节点；如果不相交，返回null 即可。 要求：如果链表1 
//的长度为N，链表2的长度为M，时间复杂度请达到 O(N + M)，额外 
//空间复杂度请达到O(1)。
#include<iostream>
#include<stdlib.h>
using namespace std;

class node
{
public:
	int value;
	node *next;
	node(int data)
	{
		this->value = data;
	}
};


node *getLoopNode(node *head)
{
	if (head == NULL || head->next == NULL || head->next->next == NULL)
		return NULL;
	node *n1 = head->next;
	node *n2 = head->next->next;
	while (n1 != n2)
	{
		if (n2->next == NULL || n2->next->next == NULL)
			return NULL;
		n2 = n2->next->next;
		n1 = n1->next;
	}
    n2 = head;
    while (n1 != n2)
    {
        n1 = n1->next;
        n2 = n2->next;
    }
    return n1;
}


node *noLoop(node *head1, node *head2)
{
    if (head1 == NULL || head2 == NULL)
    {
        return NULL;
    }
    node *cur1 = head1;
    node *cur2 = head2;
    int n = 0;
    while (cur1->next != NULL)
    {
        n++;
        cur1 = cur1->next;
    }
    while (cur2->next != NULL)
    {
        n--;
        cur2 = cur2->next;
    }
    if (cur1 != cur2)
    {
        return NULL;
    }
    cur1 = n > 0 ? head1 : head2;
    cur2 = cur1 == head1 ? head2 : head1;
    n = abs(n);
    while (n != 0)
    {
        n--; 
        cur1 = cur1->next;
    }
    while (cur1 != cur2)
    {
        cur1 = cur1->next;
        cur2 = cur2->next;
    }
    return cur1;
}


node *bothLoop(node *head1, node *head2, node *loop1, node *loop2)
{
    node *cur1 = NULL;
    node *cur2 = NULL;
    if (loop1 == loop2)
    {
        cur1 = head1;
        cur2 = head2;
        int n = 0;
        while (cur1 != loop1)
        {
            n++;
            cur1 = cur1->next;
        }
        while (cur2 != loop2)
        {
            n--;
            cur2 = cur2->next;
        }
        cur1 = n > 0 ? head1 : head2;
        cur2 = cur1 == head1 ? head2 : head1;
        n = abs(n);
        while (n != 0)
        {
            n--;
            cur1 = cur1->next;
        }
        while (cur1 != cur2)
        {
            cur1 = cur1->next;
            cur2 = cur2->next;
        }
        return cur1;
    }
    else
    {
        cur1 = loop1->next;
        while (cur1 != loop1)
        {
            if (cur1 == loop2)
                return loop1;
            cur1 = cur1->next;
        }
        return NULL;
    }
}


node * getIntersectNode(node *head1, node *head2)
{
	if (head1 == NULL || head2 == NULL)
	{
		return NULL;
	}
	node *loop1 = getLoopNode(head1);
	node *loop2 = getLoopNode(head2);
	if (loop1 == NULL && loop2 == NULL)
		return noLoop(head1, head2);
	if (loop1 != NULL && loop2 != NULL)
		return bothLoop(head1,head2,loop1,loop2);
	return NULL;
}


int main()
{
    node *head1 = new node(1);
    head1->next = new node(2);
    head1->next->next = new node(3);
    head1->next->next->next = new node(4);
    head1->next->next->next->next = new node(5);
    head1->next->next->next->next->next = new node(6);
    head1->next->next->next->next->next->next = new node(7);
    head1->next->next->next->next->next->next->next = NULL;

    node *head2 = new node(0);
    head2->next = new node(9);
    head2->next->next = new node(8);
    head2->next->next->next = head1->next->next->next->next->next;
    cout << getIntersectNode(head1, head2)->value << endl;
    system("pause");
    return 0;
}
